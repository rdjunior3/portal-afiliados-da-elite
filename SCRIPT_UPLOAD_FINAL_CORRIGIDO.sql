-- SCRIPT FINAL CORRIGIDO: RESOLVER UPLOAD DE PRODUTOS
-- Execute no Supabase Dashboard ‚Üí SQL Editor
-- Corrige erro de sintaxe e resolve timeout de upload

-- 1. LIMPAR POL√çTICAS STORAGE CONFLITANTES
DO $$
DECLARE
    policy_record RECORD;
BEGIN
    RAISE NOTICE 'üîß Iniciando limpeza de pol√≠ticas storage...';
    
    -- Processar uma pol√≠tica por vez
    FOR policy_record IN 
        SELECT policyname 
        FROM pg_policies 
        WHERE schemaname = 'storage' AND tablename = 'objects'
    LOOP
        EXECUTE format('DROP POLICY IF EXISTS %I ON storage.objects', policy_record.policyname);
        RAISE NOTICE 'üóëÔ∏è Pol√≠tica removida: %', policy_record.policyname;
    END LOOP;
    
    RAISE NOTICE '‚úÖ Todas as pol√≠ticas storage antigas foram removidas';
END $$;

-- 2. CONFIGURAR BUCKET PRODUCT-IMAGES
DO $$
BEGIN
    RAISE NOTICE 'üìÅ Configurando bucket product-images...';
    
    -- Inserir ou atualizar bucket
    INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
    VALUES (
        'product-images',
        'product-images', 
        true,
        10485760, -- 10MB
        ARRAY['image/jpeg', 'image/jpg', 'image/png', 'image/webp', 'image/gif']
    )
    ON CONFLICT (id) DO UPDATE SET
        public = true,
        file_size_limit = 10485760,
        allowed_mime_types = ARRAY['image/jpeg', 'image/jpg', 'image/png', 'image/webp', 'image/gif'];

    RAISE NOTICE '‚úÖ Bucket product-images configurado com sucesso';
END $$;

-- 3. APLICAR POL√çTICA PERMISSIVA
DO $$
BEGIN
    RAISE NOTICE 'üõ°Ô∏è Aplicando pol√≠tica permissiva...';
    
    -- Criar pol√≠tica ultra permissiva
    CREATE POLICY "storage_all_access" ON storage.objects
        FOR ALL 
        TO public
        USING (true)
        WITH CHECK (true);

    RAISE NOTICE '‚úÖ Pol√≠tica permissiva aplicada com sucesso';
END $$;

-- 4. CONFIGURAR USU√ÅRIO ADMIN
DO $$
DECLARE
    admin_id UUID;
BEGIN
    RAISE NOTICE 'üë§ Configurando usu√°rio admin...';
    
    -- Buscar ID do usu√°rio admin
    SELECT id INTO admin_id FROM auth.users WHERE email = '04junior.silva09@gmail.com';
    
    IF admin_id IS NOT NULL THEN
        -- Inserir ou atualizar perfil admin
        INSERT INTO profiles (id, email, role, first_name, last_name)
        VALUES (admin_id, '04junior.silva09@gmail.com', 'admin', 'Admin', 'Elite')
        ON CONFLICT (id) DO UPDATE SET 
            role = 'admin',
            updated_at = NOW();
        
        RAISE NOTICE '‚úÖ Admin configurado com ID: %', admin_id;
    ELSE
        RAISE NOTICE '‚ö†Ô∏è Usu√°rio admin n√£o encontrado no auth.users';
    END IF;
END $$;

-- 5. HABILITAR RLS
DO $$
BEGIN
    RAISE NOTICE 'üîí Habilitando RLS no storage...';
    
    -- Habilitar Row Level Security
    ALTER TABLE storage.objects ENABLE ROW LEVEL SECURITY;
    
    RAISE NOTICE '‚úÖ RLS habilitado no storage.objects';
END $$;

-- 6. VERIFICA√á√ÉO FINAL COMPLETA
DO $$
DECLARE
    bucket_exists BOOLEAN;
    rls_enabled BOOLEAN;
    policy_count INTEGER;
    admin_exists BOOLEAN;
    all_good BOOLEAN := true;
BEGIN
    RAISE NOTICE 'üß™ Iniciando verifica√ß√£o final...';
    
    -- Verificar se bucket existe
    SELECT EXISTS(
        SELECT 1 FROM storage.buckets WHERE id = 'product-images'
    ) INTO bucket_exists;
    
    -- Verificar se RLS est√° habilitado
    SELECT relrowsecurity 
    FROM pg_class 
    WHERE relname = 'objects' 
    AND relnamespace = (SELECT oid FROM pg_namespace WHERE nspname = 'storage')
    INTO rls_enabled;
    
    -- Contar pol√≠ticas de storage
    SELECT COUNT(*) 
    FROM pg_policies 
    WHERE schemaname = 'storage' AND tablename = 'objects'
    INTO policy_count;
    
    -- Verificar se admin existe
    SELECT EXISTS(
        SELECT 1 FROM profiles 
        WHERE email = '04junior.silva09@gmail.com' AND role = 'admin'
    ) INTO admin_exists;
    
    -- Exibir resultados
    RAISE NOTICE '====================================';
    RAISE NOTICE 'üîç RELAT√ìRIO FINAL DE VERIFICA√á√ÉO';
    RAISE NOTICE '====================================';
    
    RAISE NOTICE 'üìÅ Bucket product-images: %', 
        CASE WHEN bucket_exists THEN 'EXISTE ‚úÖ' ELSE 'FALTA ‚ùå' END;
    
    RAISE NOTICE 'üîí RLS storage.objects: %', 
        CASE WHEN rls_enabled THEN 'HABILITADO ‚úÖ' ELSE 'DESABILITADO ‚ùå' END;
    
    RAISE NOTICE 'üõ°Ô∏è Pol√≠ticas storage ativas: %', policy_count;
    
    RAISE NOTICE 'üë§ Admin configurado: %', 
        CASE WHEN admin_exists THEN 'SIM ‚úÖ' ELSE 'N√ÉO ‚ùå' END;
    
    RAISE NOTICE '====================================';
    
    -- Verificar se tudo est√° OK
    IF NOT bucket_exists THEN
        RAISE NOTICE '‚ùå PROBLEMA: Bucket product-images n√£o existe';
        all_good := false;
    END IF;
    
    IF NOT rls_enabled THEN
        RAISE NOTICE '‚ùå PROBLEMA: RLS n√£o est√° habilitado';
        all_good := false;
    END IF;
    
    IF policy_count = 0 THEN
        RAISE NOTICE '‚ùå PROBLEMA: Nenhuma pol√≠tica de storage encontrada';
        all_good := false;
    END IF;
    
    IF NOT admin_exists THEN
        RAISE NOTICE '‚ùå PROBLEMA: Usu√°rio admin n√£o configurado';
        all_good := false;
    END IF;
    
    -- Resultado final
    IF all_good THEN
        RAISE NOTICE 'üéâ CORRE√á√ÉO APLICADA COM SUCESSO!';
        RAISE NOTICE '‚úÖ Upload de produtos deve funcionar agora!';
        RAISE NOTICE 'üîÑ Recarregue a p√°gina e teste o upload';
    ELSE
        RAISE NOTICE '‚ùå Alguns problemas ainda persistem';
        RAISE NOTICE 'üìû Contacte o suporte t√©cnico se necess√°rio';
    END IF;
    
    RAISE NOTICE '====================================';
END $$; 