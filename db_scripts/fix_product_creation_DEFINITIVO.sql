-- ================================================================
-- CORRE√á√ÉO DEFINITIVA - PORTAL AFILIADOS DA ELITE
-- RESOLVE TODAS AS CAUSAS RA√çZES DO PROBLEMA DE CADASTRO DE PRODUTO
-- Execute este script COMPLETO no Supabase Dashboard SQL Editor
-- ================================================================

-- ============================================
-- 1. DIAGN√ìSTICO INICIAL
-- ============================================
DO $$
BEGIN
    RAISE NOTICE 'üîç [DIAGN√ìSTICO] Iniciando an√°lise completa do sistema...';
    
    -- Verificar usu√°rio admin
    IF EXISTS (SELECT 1 FROM profiles WHERE id = '1f47a584-db88-4094-aa63-b2564b21dca4' AND role = 'admin') THEN
        RAISE NOTICE '‚úÖ [ADMIN] Usu√°rio admin encontrado: 04junior.silva09@gmail.com';
    ELSE
        RAISE NOTICE '‚ùå [ADMIN] Usu√°rio admin n√£o encontrado ou sem permiss√µes!';
    END IF;

    -- Verificar bucket product-images
    IF EXISTS (SELECT 1 FROM storage.buckets WHERE id = 'product-images') THEN
        RAISE NOTICE '‚úÖ [STORAGE] Bucket product-images existe';
    ELSE
        RAISE NOTICE '‚ùå [STORAGE] Bucket product-images N√ÉO EXISTE - CAUSA RAIZ #1';
    END IF;
    
    -- Verificar estrutura da tabela products
    IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'products' AND column_name = 'image_url') THEN
        RAISE NOTICE '‚úÖ [SCHEMA] Campo products.image_url existe';
    ELSE
        RAISE NOTICE '‚ùå [SCHEMA] Campo products.image_url N√ÉO EXISTE - CAUSA RAIZ #3';
    END IF;

    IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'products' AND column_name = 'sales_page_url') THEN
        RAISE NOTICE '‚úÖ [SCHEMA] Campo products.sales_page_url existe';
    ELSE
        RAISE NOTICE '‚ùå [SCHEMA] Campo products.sales_page_url N√ÉO EXISTE - CAUSA RAIZ #3';
    END IF;
    
    -- Verificar tabela product_offers
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'product_offers') THEN
        RAISE NOTICE '‚úÖ [SCHEMA] Tabela product_offers existe';
    ELSE
        RAISE NOTICE '‚ùå [SCHEMA] Tabela product_offers N√ÉO EXISTE - CAUSA RAIZ #3';
    END IF;
END $$;

-- ============================================
-- 2. CRIAR BUCKET PRODUCT-IMAGES
-- ============================================
DO $$ 
BEGIN
    RAISE NOTICE 'ü™£ [STORAGE] Criando bucket product-images...';
    
    -- Remover bucket se existir (para recriar limpo)
    DELETE FROM storage.objects WHERE bucket_id = 'product-images';
    DELETE FROM storage.buckets WHERE id = 'product-images';
    
    -- Criar bucket para imagens de produtos
    INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
    VALUES (
        'product-images',
        'product-images', 
        true,
        52428800, -- 50MB limit
        ARRAY['image/jpeg', 'image/png', 'image/gif', 'image/webp', 'image/jpg']
    );
    
    RAISE NOTICE '‚úÖ [STORAGE] Bucket product-images criado com sucesso!';
END $$;

-- ============================================
-- 3. REMOVER POL√çTICAS CONFLITANTES 
-- ============================================
DO $$
BEGIN
    RAISE NOTICE 'üßπ [RLS] Removendo pol√≠ticas conflitantes...';
    
    -- Remover todas as pol√≠ticas antigas do bucket product-images
    DROP POLICY IF EXISTS "product_images_select" ON storage.objects;
    DROP POLICY IF EXISTS "product_images_insert" ON storage.objects;
    DROP POLICY IF EXISTS "product_images_update" ON storage.objects;
    DROP POLICY IF EXISTS "product_images_delete" ON storage.objects;
    DROP POLICY IF EXISTS "Allow authenticated users to upload product images" ON storage.objects;
    DROP POLICY IF EXISTS "Allow public to view product images" ON storage.objects;
    DROP POLICY IF EXISTS "Allow admin to update product images" ON storage.objects;
    DROP POLICY IF EXISTS "Allow admin to delete product images" ON storage.objects;
    
    RAISE NOTICE '‚úÖ [RLS] Pol√≠ticas antigas removidas!';
END $$;

-- ============================================
-- 4. CRIAR POL√çTICAS STORAGE PERMISSIVAS
-- ============================================

-- Pol√≠tica para visualiza√ß√£o p√∫blica (qualquer um pode ver)
CREATE POLICY "product_images_public_select" ON storage.objects
FOR SELECT TO public
USING (bucket_id = 'product-images');

-- Pol√≠tica para upload PERMISSIVA (usu√°rios autenticados podem fazer upload)
CREATE POLICY "product_images_auth_insert" ON storage.objects
FOR INSERT TO authenticated
WITH CHECK (bucket_id = 'product-images');

-- Pol√≠tica para atualiza√ß√£o (usu√°rios autenticados)
CREATE POLICY "product_images_auth_update" ON storage.objects
FOR UPDATE TO authenticated
USING (bucket_id = 'product-images')
WITH CHECK (bucket_id = 'product-images');

-- Pol√≠tica para exclus√£o (admins apenas)
CREATE POLICY "product_images_admin_delete" ON storage.objects
FOR DELETE TO authenticated
USING (
    bucket_id = 'product-images' 
    AND EXISTS (
        SELECT 1 FROM profiles 
        WHERE profiles.id = auth.uid() 
        AND profiles.role = 'admin'
    )
);

-- ============================================
-- 5. CORRIGIR ESTRUTURA DA TABELA PRODUCTS
-- ============================================
DO $$
BEGIN
    RAISE NOTICE 'üîß [SCHEMA] Corrigindo estrutura da tabela products...';
    
    -- Adicionar campos que o c√≥digo espera (se n√£o existirem)
    
    -- Campo image_url (c√≥digo espera este nome)
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'products' AND column_name = 'image_url') THEN
        ALTER TABLE products ADD COLUMN image_url TEXT;
        RAISE NOTICE '‚úÖ [SCHEMA] Campo image_url adicionado';
    END IF;
    
    -- Campo sales_page_url (c√≥digo espera este nome)
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'products' AND column_name = 'sales_page_url') THEN
        ALTER TABLE products ADD COLUMN sales_page_url TEXT;
        RAISE NOTICE '‚úÖ [SCHEMA] Campo sales_page_url adicionado';
    END IF;
    
    -- Campo commission_amount (c√≥digo calcula e insere)
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'products' AND column_name = 'commission_amount') THEN
        ALTER TABLE products ADD COLUMN commission_amount DECIMAL(10,2) DEFAULT 0;
        RAISE NOTICE '‚úÖ [SCHEMA] Campo commission_amount adicionado';
    END IF;
    
    -- Campo total_sales (c√≥digo insere)
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'products' AND column_name = 'total_sales') THEN
        ALTER TABLE products ADD COLUMN total_sales INTEGER DEFAULT 0;
        RAISE NOTICE '‚úÖ [SCHEMA] Campo total_sales adicionado';
    END IF;
    
    -- Campo status (c√≥digo insere)
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'products' AND column_name = 'status') THEN
        ALTER TABLE products ADD COLUMN status TEXT DEFAULT 'active';
        RAISE NOTICE '‚úÖ [SCHEMA] Campo status adicionado';
    END IF;
    
    -- Migrar dados existentes se necess√°rio
    UPDATE products 
    SET 
        image_url = COALESCE(image_url, thumbnail_url),
        sales_page_url = COALESCE(sales_page_url, affiliate_link)
    WHERE image_url IS NULL OR sales_page_url IS NULL;
    
    RAISE NOTICE '‚úÖ [SCHEMA] Migra√ß√£o de dados conclu√≠da!';
END $$;

-- ============================================
-- 6. CRIAR TABELA PRODUCT_OFFERS
-- ============================================
DO $$
BEGIN
    RAISE NOTICE 'üì¶ [SCHEMA] Criando tabela product_offers...';
    
    -- Criar tabela se n√£o existir
    CREATE TABLE IF NOT EXISTS product_offers (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        product_id UUID REFERENCES products(id) ON DELETE CASCADE,
        name TEXT NOT NULL,
        description TEXT,
        price DECIMAL(10,2) NOT NULL DEFAULT 0,
        commission_rate DECIMAL(5,2) NOT NULL DEFAULT 10,
        commission_amount DECIMAL(10,2) DEFAULT 0,
        promotion_url TEXT, -- Campo que o c√≥digo usa
        is_default BOOLEAN DEFAULT false,
        is_active BOOLEAN DEFAULT true,
        sort_order INTEGER DEFAULT 0,
        created_at TIMESTAMPTZ DEFAULT NOW(),
        updated_at TIMESTAMPTZ DEFAULT NOW()
    );
    
    RAISE NOTICE '‚úÖ [SCHEMA] Tabela product_offers criada!';
END $$;

-- ============================================
-- 7. AJUSTAR POL√çTICAS RLS DA TABELA PRODUCTS
-- ============================================
DO $$
BEGIN
    RAISE NOTICE 'üîê [RLS] Configurando pol√≠ticas RLS para products...';
    
    -- Habilitar RLS
    ALTER TABLE products ENABLE ROW LEVEL SECURITY;
    ALTER TABLE product_offers ENABLE ROW LEVEL SECURITY;
    
    -- Remover pol√≠ticas antigas
    DROP POLICY IF EXISTS "products_admin_insert" ON products;
    DROP POLICY IF EXISTS "products_admin_update" ON products;
    DROP POLICY IF EXISTS "products_admin_delete" ON products;
    DROP POLICY IF EXISTS "products_public_select" ON products;
    
    -- Pol√≠ticas permissivas para products
    CREATE POLICY "products_public_select" ON products
    FOR SELECT TO public
    USING (true);
    
    CREATE POLICY "products_admin_insert" ON products
    FOR INSERT TO authenticated
    WITH CHECK (
        EXISTS (
            SELECT 1 FROM profiles 
            WHERE profiles.id = auth.uid() 
            AND profiles.role = 'admin'
        )
    );
    
    CREATE POLICY "products_admin_update" ON products
    FOR UPDATE TO authenticated
    USING (
        EXISTS (
            SELECT 1 FROM profiles 
            WHERE profiles.id = auth.uid() 
            AND profiles.role = 'admin'
        )
    )
    WITH CHECK (
        EXISTS (
            SELECT 1 FROM profiles 
            WHERE profiles.id = auth.uid() 
            AND profiles.role = 'admin'
        )
    );
    
    CREATE POLICY "products_admin_delete" ON products
    FOR DELETE TO authenticated
    USING (
        EXISTS (
            SELECT 1 FROM profiles 
            WHERE profiles.id = auth.uid() 
            AND profiles.role = 'admin'
        )
    );
    
    -- Pol√≠ticas para product_offers
    DROP POLICY IF EXISTS "offers_admin_all" ON product_offers;
    CREATE POLICY "offers_admin_all" ON product_offers
    FOR ALL TO authenticated
    USING (
        EXISTS (
            SELECT 1 FROM profiles 
            WHERE profiles.id = auth.uid() 
            AND profiles.role = 'admin'
        )
    )
    WITH CHECK (
        EXISTS (
            SELECT 1 FROM profiles 
            WHERE profiles.id = auth.uid() 
            AND profiles.role = 'admin'
        )
    );
    
    RAISE NOTICE '‚úÖ [RLS] Pol√≠ticas RLS configuradas!';
END $$;

-- ============================================
-- 8. VERIFICA√á√ÉO FINAL E TESTES
-- ============================================
DO $$
BEGIN
    RAISE NOTICE 'üß™ [TESTE] Executando verifica√ß√µes finais...';
    
    -- Teste 1: Bucket existe e est√° acess√≠vel
    IF EXISTS (SELECT 1 FROM storage.buckets WHERE id = 'product-images' AND public = true) THEN
        RAISE NOTICE '‚úÖ [TESTE] Bucket product-images est√° p√∫blico e acess√≠vel';
    ELSE
        RAISE NOTICE '‚ùå [TESTE] Problema com bucket product-images';
    END IF;
    
    -- Teste 2: Estrutura products correta
    IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'products' AND column_name = 'image_url') 
       AND EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'products' AND column_name = 'sales_page_url') THEN
        RAISE NOTICE '‚úÖ [TESTE] Estrutura da tabela products est√° alinhada com o c√≥digo';
    ELSE
        RAISE NOTICE '‚ùå [TESTE] Estrutura da tabela products ainda tem problemas';
    END IF;
    
    -- Teste 3: Tabela product_offers existe
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'product_offers') THEN
        RAISE NOTICE '‚úÖ [TESTE] Tabela product_offers existe e est√° funcional';
    ELSE
        RAISE NOTICE '‚ùå [TESTE] Tabela product_offers n√£o foi criada';
    END IF;
    
    -- Teste 4: Pol√≠ticas RLS est√£o ativas
    IF EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'products' AND policyname LIKE '%admin%') THEN
        RAISE NOTICE '‚úÖ [TESTE] Pol√≠ticas RLS para products est√£o ativas';
    ELSE
        RAISE NOTICE '‚ùå [TESTE] Pol√≠ticas RLS para products n√£o est√£o funcionando';
    END IF;
    
    -- Teste 5: Usu√°rio admin tem permiss√µes
    IF EXISTS (SELECT 1 FROM profiles WHERE id = '1f47a584-db88-4094-aa63-b2564b21dca4' AND role = 'admin') THEN
        RAISE NOTICE '‚úÖ [TESTE] Usu√°rio admin 04junior.silva09@gmail.com tem permiss√µes corretas';
    ELSE
        RAISE NOTICE '‚ùå [TESTE] Usu√°rio admin sem permiss√µes adequadas';
    END IF;
END $$;

-- ============================================
-- 9. RELAT√ìRIO FINAL
-- ============================================
SELECT 'üéâ CORRE√á√ÉO DEFINITIVA CONCLU√çDA!' as status;

SELECT 
    'üìä RESUMO DA CORRE√á√ÉO' as categoria,
    'Bucket product-images: CRIADO' as item1,
    'Pol√≠ticas Storage: PERMISSIVAS' as item2,
    'Schema products: ALINHADO' as item3,
    'Tabela product_offers: CRIADA' as item4,
    'RLS Policies: CONFIGURADAS' as item5;

SELECT 
    'üöÄ PR√ìXIMOS PASSOS' as categoria,
    '1. Teste o cadastro de produto no frontend' as passo1,
    '2. Upload de imagem deve funcionar sem erros' as passo2,
    '3. Verificar se ofertas s√£o criadas corretamente' as passo3,
    '4. Confirmar que produto aparece na listagem' as passo4;

-- Exibir configura√ß√£o atual do bucket
SELECT 
    b.id as bucket_name,
    b.public,
    b.file_size_limit / 1024 / 1024 as size_limit_mb,
    b.allowed_mime_types
FROM storage.buckets b 
WHERE b.id = 'product-images';

-- Exibir pol√≠ticas criadas
SELECT 
    schemaname,
    tablename,
    policyname,
    roles
FROM pg_policies 
WHERE (tablename = 'objects' AND schemaname = 'storage' AND policyname LIKE '%product_images%')
   OR (tablename IN ('products', 'product_offers') AND schemaname = 'public');

-- Mensagens finais
DO $$
BEGIN
    RAISE NOTICE '‚úÖ Execute este script e depois teste o cadastro de produto!';
    RAISE NOTICE 'üîó Se ainda houver problemas, verifique os logs do frontend para identificar outras causas.';
END $$; 