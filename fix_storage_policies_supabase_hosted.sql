-- =====================================================
-- CORRE√á√ÉO SUPABASE HOSPEDADO: Storage Policies
-- Data: 2025-01-30
-- Vers√£o: Compat√≠vel com permiss√µes limitadas
-- =====================================================

-- NOTA: No Supabase hospedado, algumas opera√ß√µes de storage precisam ser feitas pela interface
-- Este script foca apenas no que podemos fazer via SQL

-- 1. VERIFICAR STATUS ATUAL DOS BUCKETS
SELECT 'VERIFICA√á√ÉO: Status atual dos buckets' as info;

SELECT 
  id as bucket,
  public as publico,
  file_size_limit as limite_mb,
  allowed_mime_types as tipos_permitidos,
  created_at
FROM storage.buckets 
WHERE id IN ('products', 'avatars', 'courses', 'uploads')
ORDER BY id;

-- 2. VERIFICAR POL√çTICAS EXISTENTES  
SELECT 'VERIFICA√á√ÉO: Pol√≠ticas existentes' as info;

SELECT 
  policyname as politica,
  cmd as operacao,
  CASE 
    WHEN qual LIKE '%products%' THEN 'üè™ PRODUCTS'
    WHEN qual LIKE '%avatars%' THEN 'üë§ AVATARS' 
    WHEN qual LIKE '%courses%' THEN 'üìö COURSES'
    WHEN qual LIKE '%uploads%' THEN 'üìÅ UPLOADS'
    ELSE '‚ùì OUTROS'
  END as bucket_tipo
FROM pg_policies 
WHERE tablename = 'objects' 
AND schemaname = 'storage'
ORDER BY bucket_tipo, cmd;

-- 3. VERIFICAR SEU PERFIL E PERMISS√ïES
SELECT 'VERIFICA√á√ÉO: Seu perfil e permiss√µes' as info;

SELECT 
  id as user_id,
  email,
  role,
  affiliate_status,
  CASE 
    WHEN role = ANY(ARRAY['admin'::user_role, 'super_admin'::user_role]) 
    THEN '‚úÖ √â ADMIN - Pode fazer upload em products'
    ELSE '‚ùå N√ÉO √© admin - Apenas avatars'
  END as status_permissao,
  created_at,
  onboarding_completed_at
FROM profiles 
WHERE id = auth.uid();

-- 4. VERIFICAR SE EXISTE POL√çTICA INSERT PARA PRODUCTS
SELECT 'VERIFICA√á√ÉO: Pol√≠tica INSERT para products' as info;

SELECT 
  CASE 
    WHEN EXISTS (
      SELECT 1 FROM pg_policies 
      WHERE tablename = 'objects' 
      AND cmd = 'INSERT'
      AND qual LIKE '%products%'
    ) 
    THEN '‚úÖ Pol√≠tica INSERT para products EXISTE'
    ELSE '‚ùå Pol√≠tica INSERT para products N√ÉO EXISTE'
  END as status_products;

-- 5. VERIFICAR SE EXISTE POL√çTICA INSERT PARA AVATARS
SELECT 'VERIFICA√á√ÉO: Pol√≠tica INSERT para avatars' as info;

SELECT 
  CASE 
    WHEN EXISTS (
      SELECT 1 FROM pg_policies 
      WHERE tablename = 'objects' 
      AND cmd = 'INSERT' 
      AND qual LIKE '%avatars%'
    ) 
    THEN '‚úÖ Pol√≠tica INSERT para avatars EXISTE'
    ELSE '‚ùå Pol√≠tica INSERT para avatars N√ÉO EXISTE'
  END as status_avatars;

-- 6. INSTRU√á√ïES PARA CORRIGIR VIA INTERFACE
SELECT 'INSTRU√á√ïES: Como corrigir via interface do Supabase' as info;

SELECT '1. Acesse: Dashboard > Storage > Policies' as passo_1;
SELECT '2. Clique em "New Policy" na tabela objects' as passo_2;
SELECT '3. Escolha "Custom" para criar pol√≠tica personalizada' as passo_3;
SELECT '4. Configure as pol√≠ticas conforme pr√≥ximas instru√ß√µes' as passo_4;

-- 7. TEMPLATE PARA POL√çTICA DE PRODUCTS (COPY/PASTE na interface)
SELECT '=== POL√çTICA 1: Products Upload (Cole na interface) ===' as template_1;

SELECT 'Nome da Pol√≠tica: products_upload_by_admins' as nome_1;
SELECT 'Opera√ß√£o: INSERT' as operacao_1;
SELECT 'Target roles: authenticated' as target_1;
SELECT 'Policy definition (USING): true' as using_1;
SELECT 'Policy check (WITH CHECK):' as check_label_1;
SELECT 'bucket_id = ''products'' AND EXISTS (SELECT 1 FROM profiles WHERE profiles.id = auth.uid() AND profiles.role = ANY(ARRAY[''admin''::user_role, ''super_admin''::user_role]))' as check_1;

-- 8. TEMPLATE PARA POL√çTICA DE AVATARS (COPY/PASTE na interface)
SELECT '=== POL√çTICA 2: Avatars Upload (Cole na interface) ===' as template_2;

SELECT 'Nome da Pol√≠tica: avatars_upload_by_users' as nome_2;
SELECT 'Opera√ß√£o: INSERT' as operacao_2;
SELECT 'Target roles: authenticated' as target_2;
SELECT 'Policy definition (USING): true' as using_2;
SELECT 'Policy check (WITH CHECK):' as check_label_2;
SELECT 'bucket_id = ''avatars''.' as check_2;

-- 9. VERIFICA√á√ÉO FINAL
SELECT '=== RESUMO DO QUE VOC√ä PRECISA FAZER ===' as resumo;

SELECT 'Se as pol√≠ticas INSERT n√£o existem, crie via interface' as acao_1;
SELECT 'Se os buckets n√£o s√£o p√∫blicos, marque como p√∫blico' as acao_2;
SELECT 'Se n√£o √© admin, promova seu usu√°rio para admin' as acao_3;
SELECT 'Execute novamente este script para verificar' as acao_4;

-- 10. COMANDO PARA PROMOVER USU√ÅRIO (se necess√°rio)
SELECT '=== SE NECESS√ÅRIO: Promover usu√°rio para admin ===' as promocao;

-- Este comando SIM podemos executar:
UPDATE profiles 
SET role = 'admin'::user_role 
WHERE id = auth.uid()
AND role NOT IN ('admin', 'super_admin');

SELECT 
  CASE 
    WHEN role = 'admin'::user_role THEN '‚úÖ Usu√°rio promovido para ADMIN com sucesso!'
    ELSE '‚ö†Ô∏è Usu√°rio j√° era admin ou n√£o foi alterado'
  END as resultado_promocao
FROM profiles 
WHERE id = auth.uid(); 