-- =====================================================
-- SCRIPT DE CONFIGURA√á√ÉO INICIAL
-- Portal Afiliados da Elite - Performance Otimizada
-- =====================================================

-- Verificar se todas as tabelas foram criadas
DO $$ 
DECLARE
    tables_count INTEGER;
BEGIN
    SELECT COUNT(*) INTO tables_count 
    FROM information_schema.tables 
    WHERE table_schema = 'public' 
    AND table_name IN ('profiles', 'products', 'categories', 'courses', 'lessons', 'chat_rooms', 'messages', 'affiliate_links', 'commissions');
    
    IF tables_count < 9 THEN
        RAISE EXCEPTION 'Nem todas as tabelas necess√°rias foram criadas. Execute primeiro a migra√ß√£o principal.';
    END IF;
    
    RAISE NOTICE 'Todas as tabelas necess√°rias est√£o presentes.';
END $$;

-- =====================================================
-- CONFIGURA√á√ïES DE PERFORMANCE
-- =====================================================

-- Atualizar estat√≠sticas para otimiza√ß√£o de queries
ANALYZE;

-- Configurar autovacuum mais agressivo para tabelas de alta movimenta√ß√£o
ALTER TABLE link_analytics SET (
    autovacuum_vacuum_scale_factor = 0.1,
    autovacuum_analyze_scale_factor = 0.05
);

ALTER TABLE messages SET (
    autovacuum_vacuum_scale_factor = 0.1,
    autovacuum_analyze_scale_factor = 0.05
);

-- =====================================================
-- CRIAR USU√ÅRIO ADMIN INICIAL
-- =====================================================

-- Fun√ß√£o para criar usu√°rio admin inicial
CREATE OR REPLACE FUNCTION create_initial_admin(admin_email TEXT)
RETURNS VOID
LANGUAGE plpgsql
AS $$
BEGIN
    -- Verificar se j√° existe um admin
    IF EXISTS (SELECT 1 FROM profiles WHERE role = 'admin') THEN
        RAISE NOTICE 'J√° existe pelo menos um usu√°rio admin no sistema.';
        RETURN;
    END IF;
    
    -- Verificar se o email existe nos profiles
    IF NOT EXISTS (SELECT 1 FROM profiles WHERE email = admin_email) THEN
        RAISE NOTICE 'Email % n√£o encontrado nos profiles. Primeiro fa√ßa login com este email.', admin_email;
        RETURN;
    END IF;
    
    -- Promover usu√°rio para admin
    UPDATE profiles 
    SET 
        role = 'admin',
        affiliate_status = 'approved',
        updated_at = NOW()
    WHERE email = admin_email;
    
    RAISE NOTICE 'Usu√°rio % promovido para admin com sucesso!', admin_email;
END;
$$;

-- =====================================================
-- INSERIR DADOS INICIAIS ESSENCIAIS
-- =====================================================

-- Inserir categorias padr√£o (se n√£o existirem)
INSERT INTO categories (name, slug, description, color, sort_order) VALUES
    ('Marketing Digital', 'marketing-digital', 'Produtos relacionados a marketing digital e vendas online', '#f59e0b', 1),
    ('Educa√ß√£o', 'educacao', 'Cursos e materiais educacionais', '#3b82f6', 2),
    ('Sa√∫de e Bem-estar', 'saude-bem-estar', 'Produtos para sa√∫de e qualidade de vida', '#10b981', 3),
    ('Tecnologia', 'tecnologia', 'Software, apps e ferramentas tecnol√≥gicas', '#8b5cf6', 4),
    ('Finan√ßas', 'financas', 'Investimentos e educa√ß√£o financeira', '#ef4444', 5),
    ('Desenvolvimento Pessoal', 'desenvolvimento-pessoal', 'Livros, cursos e materiais de crescimento pessoal', '#f97316', 6)
ON CONFLICT (slug) DO NOTHING;

-- Inserir sala "Comunidade da Elite" (se n√£o existir)
INSERT INTO chat_rooms (name, description, is_active) 
VALUES (
    'Comunidade da Elite',
    'Sala oficial da comunidade de afiliados elite. Networking premium e discuss√µes estrat√©gicas.',
    TRUE
) ON CONFLICT DO NOTHING;

-- Inserir curso de boas-vindas
INSERT INTO courses (title, description, is_active) VALUES (
    'Bem-vindo ao Portal Elite',
    'Curso introdut√≥rio para novos afiliados. Aprenda como maximizar seus ganhos e utilizar todas as ferramentas dispon√≠veis.',
    TRUE
) ON CONFLICT DO NOTHING;

-- Inserir aulas do curso de boas-vindas
DO $$
DECLARE
    welcome_course_id UUID;
BEGIN
    SELECT id INTO welcome_course_id FROM courses WHERE title = 'Bem-vindo ao Portal Elite' LIMIT 1;
    
    IF welcome_course_id IS NOT NULL THEN
        INSERT INTO lessons (course_id, title, description, order_index, is_active) VALUES
            (welcome_course_id, 'Introdu√ß√£o ao Portal', 'Vis√£o geral das funcionalidades e como come√ßar', 1, TRUE),
            (welcome_course_id, 'Criando seus Primeiros Links', 'Como criar e otimizar links de afiliado', 2, TRUE),
            (welcome_course_id, 'Estrat√©gias de Convers√£o', 'T√©cnicas comprovadas para aumentar suas vendas', 3, TRUE),
            (welcome_course_id, 'Acompanhando Performance', 'Como usar o dashboard para monitorar resultados', 4, TRUE)
        ON CONFLICT DO NOTHING;
    END IF;
END $$;

-- =====================================================
-- CONFIGURAR NOTIFICA√á√ïES PADR√ÉO
-- =====================================================

-- Fun√ß√£o para criar notifica√ß√£o de boas-vindas
CREATE OR REPLACE FUNCTION create_welcome_notification(user_id UUID)
RETURNS VOID
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO notifications (
        user_id,
        type,
        title,
        message,
        action_url,
        action_label,
        priority
    ) VALUES (
        user_id,
        'system',
        'üèÜ Bem-vindo ao Portal Elite!',
        'Parab√©ns por se juntar √† nossa comunidade premium de afiliados. Explore os recursos dispon√≠veis e maximize seus ganhos.',
        '/dashboard/content',
        'Ver Cursos',
        1
    );
END;
$$;

-- =====================================================
-- CRIAR √çNDICES ADICIONAIS PARA PERFORMANCE
-- =====================================================

-- √çndices para searches frequentes
CREATE INDEX IF NOT EXISTS idx_profiles_email_lower ON profiles(LOWER(email));
CREATE INDEX IF NOT EXISTS idx_products_name_lower ON products(LOWER(name));

-- √çndices para relat√≥rios
CREATE INDEX IF NOT EXISTS idx_commissions_date_status ON commissions(conversion_date, status);
CREATE INDEX IF NOT EXISTS idx_link_analytics_date_type ON link_analytics(created_at, event_type);

-- √çndices para performance do chat
CREATE INDEX IF NOT EXISTS idx_messages_room_created ON messages(room_id, created_at DESC);

-- =====================================================
-- FUN√á√ïES DE MONITORAMENTO
-- =====================================================

-- Fun√ß√£o para verificar sa√∫de do banco
CREATE OR REPLACE FUNCTION check_database_health()
RETURNS TABLE (
    metric_name TEXT,
    metric_value TEXT,
    status TEXT
)
LANGUAGE plpgsql
AS $$
BEGIN
    RETURN QUERY
    SELECT 
        'Total de Usu√°rios'::TEXT,
        (SELECT COUNT(*)::TEXT FROM profiles),
        CASE WHEN (SELECT COUNT(*) FROM profiles) > 0 THEN 'OK' ELSE 'WARNING' END;
    
    RETURN QUERY
    SELECT 
        'Produtos Ativos'::TEXT,
        (SELECT COUNT(*)::TEXT FROM products WHERE status = 'active'),
        CASE WHEN (SELECT COUNT(*) FROM products WHERE status = 'active') > 0 THEN 'OK' ELSE 'WARNING' END;
    
    RETURN QUERY
    SELECT 
        'Salas de Chat'::TEXT,
        (SELECT COUNT(*)::TEXT FROM chat_rooms WHERE is_active = TRUE),
        CASE WHEN (SELECT COUNT(*) FROM chat_rooms WHERE is_active = TRUE) > 0 THEN 'OK' ELSE 'WARNING' END;
    
    RETURN QUERY
    SELECT 
        'Links Ativos'::TEXT,
        (SELECT COUNT(*)::TEXT FROM affiliate_links WHERE status = 'active'),
        'INFO';
    
    RETURN QUERY
    SELECT 
        'Comiss√µes Pendentes'::TEXT,
        (SELECT COUNT(*)::TEXT FROM commissions WHERE status = 'pending'),
        'INFO';
END;
$$;

-- Fun√ß√£o para limpeza de dados antigos
CREATE OR REPLACE FUNCTION cleanup_old_data()
RETURNS INTEGER
LANGUAGE plpgsql
AS $$
DECLARE
    rows_deleted INTEGER := 0;
BEGIN
    -- Limpar analytics antigas (mais de 6 meses)
    DELETE FROM link_analytics 
    WHERE created_at < NOW() - INTERVAL '6 months' 
    AND event_type = 'click';
    
    GET DIAGNOSTICS rows_deleted = ROW_COUNT;
    
    -- Limpar notifica√ß√µes lidas antigas (mais de 3 meses)
    DELETE FROM notifications 
    WHERE is_read = TRUE 
    AND read_at < NOW() - INTERVAL '3 months';
    
    GET DIAGNOSTICS rows_deleted = rows_deleted + ROW_COUNT;
    
    -- Atualizar estat√≠sticas ap√≥s limpeza
    ANALYZE;
    
    RETURN rows_deleted;
END;
$$;

-- =====================================================
-- TRIGGER PARA NOTIFICA√á√ÉO DE BOAS-VINDAS
-- =====================================================

CREATE OR REPLACE FUNCTION trigger_welcome_notification()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
    -- Criar notifica√ß√£o de boas-vindas para novos usu√°rios
    IF TG_OP = 'INSERT' THEN
        PERFORM create_welcome_notification(NEW.id);
    END IF;
    
    RETURN NEW;
END;
$$;

-- Aplicar trigger
DROP TRIGGER IF EXISTS welcome_notification_trigger ON profiles;
CREATE TRIGGER welcome_notification_trigger
    AFTER INSERT ON profiles
    FOR EACH ROW
    EXECUTE FUNCTION trigger_welcome_notification();

-- =====================================================
-- CONFIGURA√á√ïES FINAIS
-- =====================================================

-- Atualizar estat√≠sticas finais
ANALYZE;

-- Mostrar resumo da configura√ß√£o
DO $$
BEGIN
    RAISE NOTICE '=== CONFIGURA√á√ÉO CONCLU√çDA ===';
    RAISE NOTICE 'Tabelas: %', (SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public');
    RAISE NOTICE '√çndices: %', (SELECT COUNT(*) FROM pg_indexes WHERE schemaname = 'public');
    RAISE NOTICE 'Fun√ß√µes: %', (SELECT COUNT(*) FROM pg_proc WHERE pronamespace = (SELECT oid FROM pg_namespace WHERE nspname = 'public'));
    RAISE NOTICE 'Categorias: %', (SELECT COUNT(*) FROM categories);
    RAISE NOTICE 'Salas de Chat: %', (SELECT COUNT(*) FROM chat_rooms);
    RAISE NOTICE '';
    RAISE NOTICE 'Para criar um usu√°rio admin, execute:';
    RAISE NOTICE 'SELECT create_initial_admin(''seu@email.com'');';
    RAISE NOTICE '';
    RAISE NOTICE 'Para verificar a sa√∫de do banco:';
    RAISE NOTICE 'SELECT * FROM check_database_health();';
END $$; 